#Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

#Loading dataset
df = pd.read_csv('G:\DataAnalysis\Dataset .csv')
df.head()
Restaurant ID	Restaurant Name	Country Code	City	Address	Locality	Locality Verbose	Longitude	Latitude	Cuisines	...	Currency	Has Table booking	Has Online delivery	Is delivering now	Switch to order menu	Price range	Aggregate rating	Rating color	Rating text	Votes
0	6317637	Le Petit Souffle	162	Makati City	Third Floor, Century City Mall, Kalayaan Avenu...	Century City Mall, Poblacion, Makati City	Century City Mall, Poblacion, Makati City, Mak...	121.027535	14.565443	French, Japanese, Desserts	...	Botswana Pula(P)	Yes	No	No	No	3	4.8	Dark Green	Excellent	314
1	6304287	Izakaya Kikufuji	162	Makati City	Little Tokyo, 2277 Chino Roces Avenue, Legaspi...	Little Tokyo, Legaspi Village, Makati City	Little Tokyo, Legaspi Village, Makati City, Ma...	121.014101	14.553708	Japanese	...	Botswana Pula(P)	Yes	No	No	No	3	4.5	Dark Green	Excellent	591
2	6300002	Heat - Edsa Shangri-La	162	Mandaluyong City	Edsa Shangri-La, 1 Garden Way, Ortigas, Mandal...	Edsa Shangri-La, Ortigas, Mandaluyong City	Edsa Shangri-La, Ortigas, Mandaluyong City, Ma...	121.056831	14.581404	Seafood, Asian, Filipino, Indian	...	Botswana Pula(P)	Yes	No	No	No	4	4.4	Green	Very Good	270
3	6318506	Ooma	162	Mandaluyong City	Third Floor, Mega Fashion Hall, SM Megamall, O...	SM Megamall, Ortigas, Mandaluyong City	SM Megamall, Ortigas, Mandaluyong City, Mandal...	121.056475	14.585318	Japanese, Sushi	...	Botswana Pula(P)	No	No	No	No	4	4.9	Dark Green	Excellent	365
4	6314302	Sambo Kojin	162	Mandaluyong City	Third Floor, Mega Atrium, SM Megamall, Ortigas...	SM Megamall, Ortigas, Mandaluyong City	SM Megamall, Ortigas, Mandaluyong City, Mandal...	121.057508	14.584450	Japanese, Korean	...	Botswana Pula(P)	Yes	No	No	No	4	4.8	Dark Green	Excellent	229
5 rows × 21 columns

def null_values(df):
    return df.isnull().sum()
null_values(df)

Restaurant ID           0
Restaurant Name         0
Country Code            0
City                    0
Address                 0
Locality                0
Locality Verbose        0
Longitude               0
Latitude                0
Cuisines                9
Average Cost for two    0
Currency                0
Has Table booking       0
Has Online delivery     0
Is delivering now       0
Switch to order menu    0
Price range             0
Aggregate rating        0
Rating color            0
Rating text             0
Votes                   0
dtype: int64

df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 9551 entries, 0 to 9550
Data columns (total 21 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   Restaurant ID         9551 non-null   int64  
 1   Restaurant Name       9551 non-null   object 
 2   Country Code          9551 non-null   int64  
 3   City                  9551 non-null   object 
 4   Address               9551 non-null   object 
 5   Locality              9551 non-null   object 
 6   Locality Verbose      9551 non-null   object 
 7   Longitude             9551 non-null   float64
 8   Latitude              9551 non-null   float64
 9   Cuisines              9542 non-null   object 
 10  Average Cost for two  9551 non-null   int64  
 11  Currency              9551 non-null   object 
 12  Has Table booking     9551 non-null   object 
 13  Has Online delivery   9551 non-null   object 
 14  Is delivering now     9551 non-null   object 
 15  Switch to order menu  9551 non-null   object 
 16  Price range           9551 non-null   int64  
 17  Aggregate rating      9551 non-null   float64
 18  Rating color          9551 non-null   object 
 19  Rating text           9551 non-null   object 
 20  Votes                 9551 non-null   int64  
dtypes: float64(3), int64(5), object(13)
memory usage: 1.5+ MB
# Data Cleaning to drop the missing values or columns
df_clean = df.dropna(subset=["Cuisines", "Aggregate rating", "Votes", "Price range", "Has Online delivery", "Has Table booking", "Latitude", "Longitude", "Rating text"])

df_clean.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 9542 entries, 0 to 9550
Data columns (total 21 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   Restaurant ID         9542 non-null   int64  
 1   Restaurant Name       9542 non-null   object 
 2   Country Code          9542 non-null   int64  
 3   City                  9542 non-null   object 
 4   Address               9542 non-null   object 
 5   Locality              9542 non-null   object 
 6   Locality Verbose      9542 non-null   object 
 7   Longitude             9542 non-null   float64
 8   Latitude              9542 non-null   float64
 9   Cuisines              9542 non-null   object 
 10  Average Cost for two  9542 non-null   int64  
 11  Currency              9542 non-null   object 
 12  Has Table booking     9542 non-null   object 
 13  Has Online delivery   9542 non-null   object 
 14  Is delivering now     9542 non-null   object 
 15  Switch to order menu  9542 non-null   object 
 16  Price range           9542 non-null   int64  
 17  Aggregate rating      9542 non-null   float64
 18  Rating color          9542 non-null   object 
 19  Rating text           9542 non-null   object 
 20  Votes                 9542 non-null   int64  
dtypes: float64(3), int64(5), object(13)
memory usage: 1.6+ MB

total_restaurants = len(df_clean)
# Extracting Cuisine_list
cuisine_list = [cuisine.strip() for cuisines in df_clean["Cuisines"].dropna() for cuisine in cuisines.split(",")]
cuisine_counts = Counter(cuisine_list)
print(cuisine_counts.most_common())

[('North Indian', 3960), ('Chinese', 2735), ('Fast Food', 1986), ('Mughlai', 995), ('Italian', 764), ('Bakery', 745), ('Continental', 736), ('Cafe', 703), ('Desserts', 653), ('South Indian', 636), ('Street Food', 562), ('American', 390), ('Pizza', 381), ('Mithai', 380), ('Burger', 251), ('Thai', 234), ('Asian', 233), ('Beverages', 229), ('Ice Cream', 226), ('Mexican', 181), ('Biryani', 177), ('Seafood', 174), ('Healthy Food', 150), ('European', 148), ('Japanese', 135), ('Finger Food', 114), ('Raw Meats', 114), ('Mediterranean', 112), ('Salad', 93), ('Sushi', 75), ('Indian', 70), ('Lebanese', 69), ('Steak', 62), ('Sandwich', 53), ('Tea', 48), ('Tibetan', 44), ('Breakfast', 41), ('Bar Food', 39), ('BBQ', 33), ('French', 29), ('Juices', 29), ('Bengali', 29), ('Brazilian', 28), ('Arabian', 28), ('Hyderabadi', 26), ('Southern', 24), ('Vegetarian', 23), ('Kerala', 23), ('Middle Eastern', 22), ('Malaysian', 22), ('Korean', 21), ('Grill', 21), ('International', 21), ('Vietnamese', 21), ('Rajasthani', 21), ('Goan', 20), ('Kashmiri', 20), ('Coffee and Tea', 19), ('Tapas', 19), ('Tex-Mex', 19), ('Spanish', 16), ('British', 16), ('Modern Indian', 16), ('Greek', 15), ('Turkish', 15), ('Indonesian', 14), ('Afghani', 14), ('Lucknowi', 13), ('Pakistani', 12), ('Latin American', 11), ('Modern Australian', 11), ('Gujarati', 11), ('Chettinad', 11), ('Awadhi', 11), ('Filipino', 10), ('German', 10), ('Cajun', 10), ('Western', 10), ('Maharashtrian', 10), ('Burmese', 10), ('Andhra', 10), ('Kebab', 10), ('North Eastern', 9), ('Nepalese', 9), ('Contemporary', 9), ('Hawaiian', 8), ('African', 8), ('Parsi', 8), ('Naga', 8), ('Turkish Pizza', 8), ('Southwestern', 7), ('Caribbean', 7), ('Portuguese', 7), ('Diner', 6), ('Bihari', 6), ('Kiwi', 6), ('Curry', 6), ('South African', 6), ('Australian', 5), ('Moroccan', 5), ('Sri Lankan', 5), ('Fusion', 4), ('Singaporean', 4), ('Charcoal Grill', 4), ('Assamese', 4), ('Mangalorean', 4), ('Patisserie', 4), ('World Cuisine', 4), ('Restaurant Cafe', 4), ('Dim Sum', 3), ('Deli', 3), ('Armenian', 3), ('Iranian', 3), ('Sunda', 3), ('Scottish', 3), ('Argentine', 2), ('Teriyaki', 2), ('Cuban', 2), ('New American', 2), ('Pub Food', 2), ('Persian', 2), ('Cantonese', 2), ('Belgian', 2), ('South American', 2), ('Drinks Only', 2), ('Oriya', 2), ('Ramen', 2), ('Asian Fusion', 2), ('Taiwanese', 2), ('Izgara', 2), ('Peruvian', 1), ('Gourmet Fast Food', 1), ('Mineira', 1), ('Canadian', 1), ('Bubble Tea', 1), ('Irish', 1), ('Soul Food', 1), ('Malay', 1), ('Malwani', 1), ('Cuisine Varies', 1), ('Peranakan', 1), ('Fish and Chips', 1), ('Durban', 1), ('D�_ner', 1), ('B�_rek', 1)]
​
Level 1
Task 1: Top Three most common Cuisines in the dataset:
# Top Three Cuisines Analysis
cuisine_counts = df_clean["Cuisines"].str.split(", ").explode().value_counts()
top3_cuisines = cuisine_counts.head(3)
top3_cuisines_percentage = (top3_cuisines / total_restaurants) * 100
for cuisine, count, percentage in zip(top3_cuisines.index, top3_cuisines.values, top3_cuisines_percentage.values):
    print(f"{cuisine}: {count} restaurants ({percentage:.2f}%).")

North Indian: 3960 restaurants (41.50%).
Chinese: 2735 restaurants (28.66%).
Fast Food: 1986 restaurants (20.81%).
